import renmas2.switch as proc
from .spectrum import Spectrum

Cie_x = [ (360, 0.0001299000), (361, 0.0001458470), (362, 0.0001638021), (363, 0.0001840037), (364, 0.0002066902),
        (365, 0.0002321000), (366, 0.0002607280), (367, 0.0002930750), (368, 0.0003293880),  (369, 0.0003699140),  
        (370, 0.0004149000),  (371, 0.0004641587), (372, 0.0005189860), (373, 0.0005818540),  (374, 0.0006552347),
        (375, 0.0007416000), (376, 0.0008450296),  (377, 0.0009645268),  (378, 0.001094949),  (379, 0.001231154),
        (380, 0.001368000),  (381, 0.001502050),  (382, 0.001642328),  (383, 0.001802382), (384, 0.001995757),  
        (385, 0.002236000), (386, 0.002535385),  (387, 0.002892603), (388, 0.003300829), (389, 0.003753236), 
        (390, 0.004243000), (391, 0.004762389), (392, 0.005330048),  (393, 0.005978712), (394, 0.006741117), 
        (395, 0.007650000), (396, 0.008751373), (397, 0.01002888),  (398, 0.01142170),  (399, 0.01286901),
        (400, 0.01431000), (401, 0.01570443),  (402, 0.01714744),  (403, 0.01878122), (404, 0.02074801),  
        (405, 0.02319000), (406, 0.02620736),  (407, 0.02978248), (408, 0.03388092),  (409, 0.03846824),
        (410, 0.04351000), (411, 0.04899560), (412, 0.05502260),  (413, 0.06171880),  (414, 0.06921200), 
        (415, 0.07763000), (416, 0.08695811),  (417, 0.09717672),  (418, 0.1084063),  (419, 0.1207672),
        (420, 0.1343800), (421, 0.1493582),  (422, 0.1653957),  (423, 0.1819831), (424, 0.1986110), 
        (425, 0.2147700), (426, 0.2301868),  (427, 0.2448797), (428, 0.2587773),  (429, 0.2718079),
        (430, 0.2839000), (431, 0.2949438), (432, 0.3048965),  (433, 0.3137873), (434, 0.3216454), 
        (435, 0.3285000), (436, 0.3343513),  (437, 0.3392101),  (438, 0.3431213),  (439, 0.3461296),
        (440, 0.3482800), (441, 0.3495999),  (442, 0.3501474),  (443, 0.3500130), (444, 0.3492870),
        (445, 0.3480600), (446, 0.3463733),  (447, 0.3442624), (448, 0.3418088),  (449, 0.3390941),
        (450, 0.3362000), (451, 0.3331977), (452, 0.3300411), (453, 0.3266357),  (454, 0.3228868), 
        (455, 0.3187000), (456, 0.3140251), (457, 0.3088840), (458, 0.3032904),  (459, 0.2972579),
        (460, 0.2908000), (461, 0.2839701), (462, 0.2767214), (463, 0.2689178), (464, 0.2604227), 
        (465, 0.2511000), (466, 0.2408475), (467, 0.2298512), (468, 0.2184072), (469, 0.2068115),
        (470, 0.1953600), (471, 0.1842136), (472, 0.1733273), (473, 0.1626881), (474, 0.1522833), 
        (475, 0.1421000), (476, 0.1321786), (477, 0.1225696), (478, 0.1132752), (479, 0.1042979),
        (480, 0.09564000), (481, 0.08729955), (482, 0.07930804), (483, 0.07171776), (484, 0.06458099),
        (485, 0.05795001), (486, 0.05186211), (487,0.04628152), (488, 0.04115088), (489, 0.03641283),
        (490, 0.03201000), (491, 0.02791720), (492, 0.02414440),(493, 0.02068700), (494, 0.01754040),
        (495, 0.01470000), (496, 0.01216179), (497, 0.009919960),(498, 0.007967240),(499, 0.006296346),
        (500, 0.004900000),(501, 0.003777173),(502, 0.002945320),(503, 0.002424880), (504, 0.002236293),
        (505, 0.002400000),(506, 0.002925520),(507, 0.003836560),(508, 0.005174840), (509, 0.006982080),
        (510, 0.009300000),(511, 0.01214949), (512, 0.01553588), (513, 0.01947752),  (514, 0.02399277),
        (515, 0.02910000), (516, 0.03481485), (517, 0.04112016), (518, 0.04798504), (519,  0.05537861),
        (520, 0.06327000), (521, 0.07163501), (522, 0.08046224), (523, 0.08973996), (524, 0.09945645),
        (525, 0.1096000), (526, 0.1201674), (527, 0.1311145), (528, 0.1423679), (529, 0.1538542), 
        (530, 0.1655000), (531,  0.1772571),(532, 0.1891400), (533, 0.2011694), (534, 0.2133658), 
        (535, 0.2257499), (536, 0.2383209), (537, 0.2510668), (538, 0.2639922), (539, 0.2771017),
        (540, 0.2904000), (541, 0.3038912), (542, 0.3175726), (543, 0.3314384), (544, 0.3454828),
        (545, 0.3597000), (546, 0.3740839), (547, 0.3886396), (548, 0.4033784), (549, 0.4183115),
        (550, 0.4334499), (551, 0.4487953), (552, 0.4643360), (553, 0.4800640), (554, 0.4959713),
        (555, 0.5120501), (556, 0.5282959), (557, 0.5446916), (558, 0.5612094), (559, 0.5778215),
        (560, 0.5945000), (561, 0.6112209), (562, 0.6279758), (563, 0.6447602), (564, 0.6615697),
        (565, 0.6784000), (566, 0.6952392), (567, 0.7120586), (568, 0.7288284), (569, 0.7455188),
        (570, 0.7621000), (571, 0.7785432), (572, 0.7948256), (573, 0.8109264), (574, 0.8268248),
        (575, 0.8425000), (576, 0.8579325), (577, 0.8730816), (578, 0.8878944), (579, 0.9023181),
        (580, 0.9163000), (581, 0.9297995), (582, 0.9427984), (583,0.9552776), (584, 0.9672179),
        (585, 0.9786000), (586, 0.9893856), (587, 0.9995488), (588, 1.0090892),(589, 1.0180064),
        (590, 1.0263000), (591, 1.0339827),(592, 1.0409860), (593, 1.0471880),(594, 1.0524667),
        (595, 1.0567000), (596, 1.0597944), (597, 1.0617992), (598, 1.0628068),(599, 1.0629096),
        (600, 1.0622000), (601, 1.0607352), (602, 1.0584436), (603, 1.0552244),(604, 1.0509768),
        (605, 1.0456000), (606, 1.0390369), (607, 1.0313608), (608, 1.0226662),(609, 1.0130477),
        (610, 1.0026000), (611, 0.9913675), (612, 0.9793314), (613, 0.9664916),(614, 0.9528479),
        (615, 0.9384000), (616, 0.9231940), (617, 0.9072440), (618, 0.8905020),(619, 0.8729200),
        (620, 0.8544499), (621, 0.8350840), (622, 0.8149460), (623, 0.7941860),(624, 0.7729540),
        (625, 0.7514000), (626, 0.7295836), (627, 0.7075888), (628, 0.6856022),(629, 0.6638104),
        (630, 0.6424000), (631, 0.62151490),(632, 0.6011138), (633, 0.5811052),(634, 0.5613977),
        (635, 0.5419000), (636, 0.5225995), (637, 0.5035464), (638, 0.4847436),(639, 0.4661939),
        (640, 0.4479000), (641, 0.4298613), (642, 0.4120980), (643, 0.3946440),(644, 0.3775333),
        (645, 0.3608000), (646, 0.3444563), (647, 0.3285168), (648, 0.3130192), (649, 0.2980011),
        (650, 0.2835000), (651, 0.2695448), (652, 0.2561184), (653, 0.2431896),(654, 0.2307272),
        (655, 0.2187000), (656, 0.2070971), (657, 0.1959232), (658, 0.1851708),(659, 0.1748323),
        (660, 0.1649000), (661, 0.1553667), (662, 0.1462300),(663, 0.1374900), (664, 0.1291467),
        (665, 0.1212000), (666, 0.1136397), (667, 0.1064650), (668, 0.09969044), (669, 0.09333061),
        (670, 0.087400000), (671, 0.08190096), (672, 0.07680428), (673, 0.07207712), (674, 0.06768664),
        (675, 0.06360000), (676, 0.05980685), (677, 0.05628216), (678, 0.05297104), (679, 0.04981861),
        (680, 0.04677000), (681, 0.04378405), (682, 0.04087536), (683, 0.03807264), (684, 0.03540461),
        (685, 0.03290000), (686, 0.03056419), (687, 0.02838056), (688, 0.02634484), (689, 0.02445275),
        (690, 0.02270000), (691, 0.02108429), (692, 0.01959988), (693, 0.01823732), (694, 0.01698717),
        (695, 0.01584000), (696, 0.01479064), (697, 0.01383132), (698, 0.01294868), (699, 0.01212920),
        (700, 0.01135916), (701, 0.01062935), (702, 0.009938846), (703, 0.009288422), (704, 0.008678854),
        (705, 0.008110916), (706, 0.007582388), (707, 0.007088746), (708, 0.006627313), (709, 0.006195408),
        (710, 0.005790346), (711, 0.005409826), (712, 0.005052583), (713, 0.004717512), (714, 0.004403507),
        (715, 0.004109457), (716, 0.003833913), (717, 0.003575748), (718, 0.003334342), (719, 0.003109075),
        (720, 0.002899327), (721, 0.002704348), (722, 0.002523020), (723, 0.002354168), (724, 0.002196616),
        (725, 0.002049190), (726, 0.001910960),(727, 0.001781438), (728, 0.001660110), (729, 0.001546459),
        (730, 0.001439971), (731, 0.001340042), (732,0.001246275), (733, 0.001158471), (734, 0.001076430),  
        (735, 0.0009999493), (736, 0.0009287358), (737, 0.0008624332), (738, 0.0008007503), (739, 0.0007433960),
        (740, 0.0006900786), (741, 0.0006405156), (742, 0.0005945021), (743, 0.0005518646), (744, 0.0005124290),
        (745, 0.0004760213), (746, 0.0004424536), (747, 0.0004115117), (748, 0.0003829814), (749, 0.0003566491),
        (750, 0.0003323011), (751, 0.0003097586), (752, 0.0002888871), (753, 0.0002695394), (754, 0.0002515682),
        (755, 0.0002348261), (756, 0.0002191710), (757, 0.0002045258), (758, 0.0001908405), (759, 0.0001780654),
        (760, 0.0001661505), (761, 0.0001550236), (762, 0.0001446219), (763, 0.0001349098), (764, 0.0001258520),
        (765, 0.0001174130), (766, 0.0001095515), (767, 0.0001022245), (768, 0.00009539445),(769, 0.00008902390),
        (770, 0.00008307527),(771,  0.00007751269),(772, 0.00007231304),(773, 0.00006745778),(774, 0.00006292844),
        (775, 0.00005870652), (776, 0.00005477028), (777, 0.00005109918), (778, 0.00004767654), (779, 0.00004448567),
        (780, 0.00004150994), (781, 0.00003873324), (782, 0.00003614203), (783, 0.00003372352), (784, 0.00003146487),
        (785, 0.00002935326), (786, 0.00002737573), (787, 0.00002552433), (788, 0.00002379376), (789, 0.00002217870),
        (790, 0.00002067383), (791, 0.00001927226), (792, 0.00001796640), (793, 0.00001674991), (794, 0.00001561648),
        (795, 0.00001455977), (796, 0.00001357387), (797, 0.00001265436), (798, 0.00001179723), (799, 0.00001099844),
        (800, 0.00001025398), (801, 0.000009559646),(802, 0.000008912044),(803,  0.000008308358), (804, 0.000007745769),
        (805, 0.000007221456), (806, 0.000006732475), (807, 0.000006276423),(808, 0.000005851304), (809, 0.000005455118),
        (810, 0.000005085868), (811, 0.000004741466), (812, 0.000004420236), (813, 0.000004120783),(814, 0.000003841716),
        (815, 0.000003581652), (816, 0.000003339127), (817, 0.000003112949), (818, 0.000002902121), (819, 0.000002705645),
        (820, 0.000002522525), (821, 0.000002351726), (822, 0.000002192415), (823, 0.000002043902), (824, 0.000001905497),
        (825, 0.000001776509), (826, 0.000001656215), (827, 0.000001544022), (828, 0.000001439440), (829, 0.000001341977), 
        (830, 0.000001251141)]


Cie_y = [(360, 0.000003917000), (361, 0.000004393581), (362, 0.000004929604), (363, 0.000005532136), (364, 0.000006208245), 
(365, 0.000006965000), (366, 0.000007813219), (367, 0.000008767336), (368, 0.000009839844), (369, 0.00001104323), 
(370, 0.00001239000), (371, 0.00001388641), (372, 0.00001555728), (373, 0.00001744296), (374, 0.00001958375), 
(375, 0.00002202000), (376, 0.00002483965), (377, 0.00002804126), (378, 0.00003153104), (379, 0.00003521521), 
(380, 0.00003900000), (381, 0.00004282640), (382, 0.00004691460), (383, 0.00005158960), (384, 0.00005717640), 
(385, 0.00006400000), (386, 0.00007234421), (387, 0.00008221224), (388, 0.00009350816), (389, 0.0001061361), 
(390, 0.0001200000), (391, 0.0001349840), (392, 0.0001514920), (393, 0.0001702080), (394, 0.0001918160), 
(395, 0.0002170000), (396, 0.0002469067), (397, 0.0002812400), (398, 0.0003185200), (399, 0.0003572667), 
(400, 0.0003960000), (401, 0.0004337147), (402, 0.0004730240), (403, 0.0005178760), (404, 0.0005722187), 
(405, 0.0006400000), (406, 0.0007245600), (407, 0.0008255000), (408, 0.0009411600), (409, 0.001069880), 
(410, 0.001210000), (411, 0.001362091), (412, 0.001530752), (413, 0.001720368), (414, 0.001935323), 
(415, 0.002180000), (416, 0.002454800), (417, 0.002764000), (418, 0.003117800), (419, 0.003526400), 
(420, 0.004000000), (421, 0.004546240), (422, 0.005159320), (423, 0.005829280), (424, 0.006546160), 
(425, 0.007300000), (426, 0.008086507), (427, 0.008908720), (428, 0.009767680), (429, 0.01066443), 
(430, 0.01160000), (431, 0.01257317), (432, 0.01358272), (433, 0.01462968), (434, 0.01571509), 
(435, 0.01684000), (436, 0.01800736), (437, 0.01921448), (438, 0.02045392), (439, 0.02171824), 
(440, 0.02300000), (441, 0.02429461), (442, 0.02561024), (443, 0.02695857), (444, 0.02835125), 
(445, 0.02980000), (446, 0.03131083), (447, 0.03288368), (448, 0.03452112), (449, 0.03622571), 
(450, 0.03800000), (451, 0.03984667), (452, 0.04176800), (453, 0.04376600), (454, 0.04584267), 
(455, 0.04800000), (456, 0.05024368), (457, 0.05257304), (458, 0.05498056), (459, 0.05745872), 
(460, 0.06000000), (461, 0.06260197), (462, 0.06527752), (463, 0.06804208), (464, 0.07091109), 
(465, 0.07390000), (466, 0.07701600), (467, 0.08026640), (468, 0.08366680), (469, 0.08723280), 
(470, 0.09098000), (471, 0.09491755), (472, 0.09904584), (473, 0.1033674), (474, 0.1078846), 
(475, 0.1126000), (476, 0.1175320), (477, 0.1226744), (478, 0.1279928), (479, 0.1334528), 
(480, 0.1390200), (481, 0.1446764), (482, 0.1504693), (483, 0.1564619), (484, 0.1627177), 
(485, 0.1693000), (486, 0.1762431), (487, 0.1835581), (488, 0.1912735), (489, 0.1994180), 
(490, 0.2080200), (491, 0.2171199), (492, 0.2267345), (493, 0.2368571), (494, 0.2474812), 
(495, 0.2586000), (496, 0.2701849), (497, 0.2822939), (498, 0.2950505), (499, 0.3085780), 
(500, 0.3230000), (501, 0.3384021), (502, 0.3546858), (503, 0.3716986), (504, 0.3892875), 
(505, 0.4073000), (506, 0.4256299), (507, 0.4443096), (508, 0.4633944), (509, 0.4829395), 
(510, 0.5030000), (511, 0.5235693), (512, 0.5445120), (513, 0.5656900), (514, 0.5869653), 
(515, 0.6082000), (516, 0.6293456), (517, 0.6503068), (518, 0.6708752), (519, 0.6908424), 
(520, 0.7100000), (521, 0.7281852), (522, 0.7454636), (523, 0.7619694), (524, 0.7778368), 
(525, 0.7932000), (526, 0.8081104), (527, 0.8224962), (528, 0.8363068), (529, 0.8494916), 
(530, 0.8620000), (531, 0.8738108), (532, 0.8849624), (533, 0.8954936), (534, 0.9054432), 
(535, 0.9148501), (536, 0.9237348), (537, 0.9320924), (538, 0.9399226), (539, 0.9472252), 
(540, 0.9540000), (541, 0.9602561), (542, 0.9660074), (543, 0.9712606), (544, 0.9760225), 
(545, 0.9803000), (546, 0.9840924), (547, 0.9874812), (548, 0.9903128), (549, 0.9928116), 
(550, 0.9949501), (551, 0.9967108), (552, 0.9980983), (553, 0.9991120), (554, 0.9997482), 
(555, 1.0000000), (556, 0.9998567), (557, 0.9993046), (558, 0.9983255), (559, 0.9968987), 
(560, 0.9950000), (561, 0.9926005), (562, 0.9897426), (563, 0.9864444), (564, 0.9827241), 
(565, 0.9786000), (566, 0.9740837), (567, 0.9691712), (568, 0.9638568), (569, 0.9581349), 
(570, 0.9520000), (571, 0.9454504), (572, 0.9384992), (573, 0.9311628), (574, 0.9234576), 
(575, 0.9154000), (576, 0.9070064), (577, 0.8982772), (578, 0.8892048), (579, 0.8797816), 
(580, 0.8700000), (581, 0.8598613), (582, 0.8493920), (583, 0.8386220), (584, 0.8275813), 
(585, 0.8163000), (586, 0.8047947), (587, 0.7930820), (588, 0.7811920), (589, 0.7691547), 
(590, 0.7570000), (591, 0.7447541), (592, 0.7324224), (593, 0.7200036), (594, 0.7074965), 
(595, 0.6949000), (596, 0.6822192), (597, 0.6694716), (598, 0.6566744), (599, 0.6438448), 
(600, 0.6310000), (601, 0.6181555), (602, 0.6053144), (603, 0.5924756), (604, 0.5796379), 
(605, 0.5668000), (606, 0.5539611), (607, 0.5411372), (608, 0.5283528), (609, 0.5156323), 
(610, 0.5030000), (611, 0.4904688), (612, 0.4780304), (613, 0.4656776), (614, 0.4534032), 
(615, 0.4412000), (616, 0.4290800), (617, 0.4170360), (618, 0.4050320), (619, 0.3930320), 
(620, 0.3810000), (621, 0.3689184), (622, 0.3568272), (623, 0.3447768), (624, 0.3328176), 
(625, 0.3210000), (626, 0.3093381), (627, 0.2978504), (628, 0.2865936), (629, 0.2756245), 
(630, 0.2650000), (631, 0.2547632), (632, 0.2448896), (633, 0.2353344), (634, 0.2260528), 
(635, 0.2170000), (636, 0.2081616), (637, 0.1995488), (638, 0.1911552), (639, 0.1829744), 
(640, 0.1750000), (641, 0.1672235), (642, 0.1596464), (643, 0.1522776), (644, 0.1451259), 
(645, 0.1382000), (646, 0.1315003), (647, 0.1250248), (648, 0.1187792), (649, 0.1127691), 
(650, 0.1070000), (651, 0.1014762), (652, 0.09618864), (653, 0.09112296), (654, 0.08626485), 
(655, 0.08160000), (656, 0.07712064), (657, 0.07282552), (658, 0.06871008), (659, 0.06476976), 
(660, 0.06100000), (661, 0.05739621), (662, 0.05395504), (663, 0.05067376), (664, 0.04754965), 
(665, 0.04458000), (666, 0.04175872), (667, 0.03908496), (668, 0.03656384), (669, 0.03420048), 
(670, 0.03200000), (671, 0.02996261), (672, 0.02807664), (673, 0.02632936), (674, 0.02470805), 
(675, 0.02320000), (676, 0.02180077), (677, 0.02050112), (678, 0.01928108), (679, 0.01812069), 
(680, 0.01700000), (681, 0.01590379), (682, 0.01483718), (683, 0.01381068), (684, 0.01283478), 
(685, 0.01192000), (686, 0.01106831), (687, 0.01027339), (688, 0.009533311), (689, 0.008846157), 
(690, 0.008210000), (691, 0.007623781), (692, 0.007085424), (693, 0.006591476), (694, 0.006138485), 
(695, 0.005723000), (696, 0.005343059), (697, 0.004995796), (698, 0.004676404), (699, 0.004380075), 
(700, 0.004102000), (701, 0.003838453), (702, 0.003589099), (703, 0.003354219), (704, 0.003134093), 
(705, 0.002929000), (706, 0.002738139), (707, 0.002559876), (708, 0.002393244), (709, 0.002237275), 
(710, 0.002091000), (711, 0.001953587), (712, 0.001824580), (713, 0.001703580), (714, 0.001590187), 
(715, 0.001484000), (716, 0.001384496), (717, 0.001291268), (718, 0.001204092), (719, 0.001122744), 
(720, 0.001047000), (721, 0.0009765896), (722, 0.0009111088), (723, 0.0008501332), (724, 0.0007932384), 
(725, 0.0007400000), (726, 0.0006900827), (727, 0.0006433100), (728, 0.0005994960), (729, 0.0005584547), 
(730, 0.0005200000), (731, 0.0004839136), (732, 0.0004500528), (733, 0.0004183452), (734, 0.0003887184), 
(735, 0.0003611000), (736, 0.0003353835), (737, 0.0003114404), (738, 0.0002891656), (739, 0.0002684539), 
(740, 0.0002492000), (741, 0.0002313019), (742, 0.0002146856), (743, 0.0001992884), (744, 0.0001850475), 
(745, 0.0001719000), (746, 0.0001597781), (747, 0.0001486044), (748, 0.0001383016), (749, 0.0001287925), 
(750, 0.0001200000), (751, 0.0001118595), (752, 0.0001043224), (753, 0.00009733560), (754, 0.00009084587), 
(755, 0.00008480000), (756, 0.00007914667), (757, 0.00007385800), (758, 0.00006891600), (759, 0.00006430267), 
(760, 0.00006000000), (761, 0.00005598187), (762, 0.00005222560), (763, 0.00004871840), (764, 0.00004544747), 
(765, 0.00004240000), (766, 0.00003956104), (767, 0.00003691512), (768, 0.00003444868), (769, 0.00003214816), 
(770, 0.00003000000), (771, 0.00002799125), (772, 0.00002611356), (773, 0.00002436024), (774, 0.00002272461), 
(775, 0.00002120000), (776, 0.00001977855), (777, 0.00001845285), (778, 0.00001721687), (779, 0.00001606459), 
(780, 0.00001499000), (781, 0.00001398728), (782, 0.00001305155), (783, 0.00001217818), (784, 0.00001136254), 
(785, 0.00001060000), (786, 0.000009885877), (787, 0.000009217304), (788, 0.000008592362), (789, 0.000008009133), 
(790, 0.000007465700), (791, 0.000006959567), (792, 0.000006487995), (793, 0.000006048699), (794, 0.000005639396), 
(795, 0.000005257800), (796, 0.000004901771), (797, 0.000004569720), (798, 0.000004260194), (799, 0.000003971739), 
(800, 0.000003702900), (801, 0.000003452163), (802, 0.000003218302), (803, 0.000003000300), (804, 0.000002797139), 
(805, 0.000002607800), (806, 0.000002431220), (807, 0.000002266531), (808, 0.000002113013), (809, 0.000001969943), 
(810, 0.000001836600), (811, 0.000001712230), (812, 0.000001596228), (813, 0.000001488090), (814, 0.000001387314), 
(815, 0.000001293400), (816, 0.000001205820), (817, 0.000001124143), (818, 0.000001048009), (819, 0.0000009770578), 
(820, 0.0000009109300), (821, 0.0000008492513), (822, 0.0000007917212), (823, 0.0000007380904), (824, 0.0000006881098), 
(825, 0.0000006415300), (826, 0.0000005980895), (827, 0.0000005575746), (828, 0.0000005198080), (829, 0.0000004846123), 
(830, 0.0000004518100)] 

Cie_z = [(360, 0.0006061000), (361, 0.0006808792), (362, 0.0007651456), (363, 0.0008600124), (364, 0.0009665928), 
(365, 0.001086000), (366, 0.001220586), (367, 0.001372729), (368, 0.001543579), (369, 0.001734286), 
(370, 0.001946000), (371, 0.002177777), (372, 0.002435809), (373, 0.002731953), (374, 0.003078064), 
(375, 0.003486000), (376, 0.003975227), (377, 0.004540880), (378, 0.005158320), (379, 0.005802907), 
(380, 0.006450001), (381, 0.007083216), (382, 0.007745488), (383, 0.008501152), (384, 0.009414544), 
(385, 0.01054999), (386, 0.01196580), (387, 0.01365587), (388, 0.01558805), (389, 0.01773015), 
(390, 0.02005001), (391, 0.02251136), (392, 0.02520288), (393, 0.02827972), (394, 0.03189704), 
(395, 0.03621000), (396, 0.04143771), (397, 0.04750372), (398, 0.05411988), (399, 0.06099803), 
(400, 0.06785001), (401, 0.07448632), (402, 0.08136156), (403, 0.08915364), (404, 0.09854048), 
(405, 0.1102000), (406, 0.1246133), (407, 0.1417017), (408, 0.1613035), (409, 0.1832568), 
(410, 0.2074000), (411, 0.2336921), (412, 0.2626114), (413, 0.2947746), (414, 0.3307985), 
(415, 0.3713000), (416, 0.4162091), (417, 0.4654642), (418, 0.5196948), (419, 0.5795303), 
(420, 0.6456000), (421, 0.7184838), (422, 0.7967133), (423, 0.8778459), (424, 0.9594390), 
(425, 1.0390501), (426, 1.1153673), (427, 1.1884971), (428, 1.2581233), (429, 1.3239296), 
(430, 1.3856000), (431, 1.4426352), (432, 1.4948035), (433, 1.5421903), (434, 1.5848807), 
(435, 1.6229600), (436, 1.6564048), (437, 1.6852959), (438, 1.7098745), (439, 1.7303821), 
(440, 1.7470600), (441, 1.7600446), (442, 1.7696233), (443, 1.7762637), (444, 1.7804334), 
(445, 1.7826000), (446, 1.7829682), (447, 1.7816998), (448, 1.7791982), (449, 1.7758671), 
(450, 1.7721100), (451, 1.7682589), (452, 1.7640390), (453, 1.7589438), (454, 1.7524663), 
(455, 1.7441000), (456, 1.7335595), (457, 1.7208581), (458, 1.7059369), (459, 1.6887372), 
(460, 1.6692000), (461, 1.6475287), (462, 1.6234127), (463, 1.5960223), (464, 1.5645280), 
(465, 1.5281000), (466, 1.4861114), (467, 1.4395215), (468, 1.3898799), (469, 1.3387362), 
(470, 1.2876400), (471, 1.2374223), (472, 1.1878243), (473, 1.1387611), (474, 1.0901480), 
(475, 1.0419000), (476, 0.9941976), (477, 0.9473473), (478, 0.9014531), (479, 0.8566193), 
(480, 0.8129501), (481, 0.7705173), (482, 0.7294448), (483, 0.6899136), (484, 0.6521049), 
(485, 0.6162000), (486, 0.5823286), (487, 0.5504162), (488, 0.5203376), (489, 0.4919673), 
(490, 0.4651800), (491, 0.4399246), (492, 0.4161836), (493, 0.3938822), (494, 0.3729459), 
(495, 0.3533000), (496, 0.3348578), (497, 0.3175521), (498, 0.3013375), (499, 0.2861686), 
(500, 0.2720000), (501, 0.2588171), (502, 0.2464838), (503, 0.2347718), (504, 0.2234533), 
(505, 0.2123000), (506, 0.2011692), (507, 0.1901196), (508, 0.1792254), (509, 0.1685608), 
(510, 0.1582000), (511, 0.1481383), (512, 0.1383758), (513, 0.1289942), (514, 0.1200751), 
(515, 0.1117000), (516, 0.1039048), (517, 0.09666748), (518, 0.08998272), (519, 0.08384531), 
(520, 0.07824999), (521, 0.07320899), (522, 0.06867816), (523, 0.06456784), (524, 0.06078835), 
(525, 0.05725001), (526, 0.05390435), (527, 0.05074664), (528, 0.04775276), (529, 0.04489859), 
(530, 0.04216000), (531, 0.03950728), (532, 0.03693564), (533, 0.03445836), (534, 0.03208872), 
(535, 0.02984000), (536, 0.02771181), (537, 0.02569444), (538, 0.02378716), (539, 0.02198925), 
(540, 0.02030000), (541, 0.01871805), (542, 0.01724036), (543, 0.01586364), (544, 0.01458461), 
(545, 0.01340000), (546, 0.01230723), (547, 0.01130188), (548, 0.01037792), (549, 0.009529306), 
(550, 0.008749999), (551, 0.008035200), (552, 0.007381600), (553, 0.006785400), (554, 0.006242800), 
(555, 0.005749999), (556, 0.005303600), (557, 0.004899800), (558, 0.004534200), (559, 0.004202400), 
(560, 0.003900000), (561, 0.003623200), (562, 0.003370600), (563, 0.003141400), (564, 0.002934800), 
(565, 0.002749999), (566, 0.002585200), (567, 0.002438600), (568, 0.002309400), (569, 0.002196800), 
(570, 0.002100000), (571, 0.002017733), (572, 0.001948200), (573, 0.001889800), (574, 0.001840933), 
(575, 0.001800000), (576, 0.001766267), (577, 0.001737800), (578, 0.001711200), (579, 0.001683067), 
(580, 0.001650001), (581, 0.001610133), (582, 0.001564400), (583, 0.001513600), (584, 0.001458533), 
(585, 0.001400000), (586, 0.001336667), (587, 0.001270000), (588, 0.001205000), (589, 0.001146667), 
(590, 0.001100000), (591, 0.001068800), (592, 0.001049400), (593, 0.001035600), (594, 0.001021200), 
(595, 0.001000000), (596, 0.0009686400), (597, 0.0009299200), (598, 0.0008868800), (599, 0.0008425600), 
(600, 0.0008000000), (601, 0.0007609600), (602, 0.0007236800), (603, 0.0006859200), (604, 0.0006454400), 
(605, 0.0006000000), (606, 0.0005478667), (607, 0.0004916000), (608, 0.0004354000), (609, 0.0003834667), 
(610, 0.0003400000), (611, 0.0003072533), (612, 0.0002831600), (613, 0.0002654400), (614, 0.0002518133), 
(615, 0.0002400000), (616, 0.0002295467), (617, 0.0002206400), (618, 0.0002119600), (619, 0.0002021867), 
(620, 0.0001900000), (621, 0.0001742133), (622, 0.0001556400), (623, 0.0001359600), (624, 0.0001168533), 
(625, 0.0001000000), (626, 0.00008613333), (627, 0.00007460000), (628, 0.00006500000), (629, 0.00005693333), 
(630, 0.00004999999), (631, 0.00004416000), (632, 0.00003948000), (633, 0.00003572000), (634, 0.00003264000), 
(635, 0.00003000000), (636, 0.00002765333), (637, 0.00002556000), (638, 0.00002364000), (639, 0.00002181333), 
(640, 0.00002000000), (641, 0.00001813333), (642, 0.00001620000), (643, 0.00001420000), (644, 0.00001213333), 
(645, 0.00001000000), (646, 0.000007733333), (647, 0.000005400000), (648, 0.000003200000), (649, 0.000001333333), 
(650, 0.000000000000), (651, 0.0), (652, 0.0), (653, 0.0), (654, 0.0), 
(655, 0.0), (656, 0.0), (657, 0.0), (658, 0.0), (659, 0.0), 
(660, 0.0), (661, 0.0), (662, 0.0), (663, 0.0), (664, 0.0), 
(665, 0.0), (666, 0.0), (667, 0.0), (668, 0.0), (669, 0.0), 
(670, 0.0), (671, 0.0), (672, 0.0), (673, 0.0), (674, 0.0), 
(675, 0.0), (676, 0.0), (677, 0.0), (678, 0.0), (679, 0.0), 
(680, 0.0), (681, 0.0), (682, 0.0), (683, 0.0), (684, 0.0), 
(685, 0.0), (686, 0.0), (687, 0.0), (688, 0.0), (689, 0.0), 
(690, 0.0), (691, 0.0), (692, 0.0), (693, 0.0), (694, 0.0), 
(695, 0.0), (696, 0.0), (697, 0.0), (698, 0.0), (699, 0.0), 
(700, 0.0), (701, 0.0), (702, 0.0), (703, 0.0), (704, 0.0), 
(705, 0.0), (706, 0.0), (707, 0.0), (708, 0.0), (709, 0.0), 
(710, 0.0), (711, 0.0), (712, 0.0), (713, 0.0), (714, 0.0), 
(715, 0.0), (716, 0.0), (717, 0.0), (718, 0.0), (719, 0.0), 
(720, 0.0), (721, 0.0), (722, 0.0), (723, 0.0), (724, 0.0), 
(725, 0.0), (726, 0.0), (727, 0.0), (728, 0.0), (729, 0.0), 
(730, 0.0), (731, 0.0), (732, 0.0), (733, 0.0), (734, 0.0), 
(735, 0.0), (736, 0.0), (737, 0.0), (738, 0.0), (739, 0.0), 
(740, 0.0), (741, 0.0), (742, 0.0), (743, 0.0), (744, 0.0), 
(745, 0.0), (746, 0.0), (747, 0.0), (748, 0.0), (749, 0.0), 
(750, 0.0), (751, 0.0), (752, 0.0), (753, 0.0), (754, 0.0), 
(755, 0.0), (756, 0.0), (757, 0.0), (758, 0.0), (759, 0.0), 
(760, 0.0), (761, 0.0), (762, 0.0), (763, 0.0), (764, 0.0), 
(765, 0.0), (766, 0.0), (767, 0.0), (768, 0.0), (769, 0.0), 
(770, 0.0), (771, 0.0), (772, 0.0), (773, 0.0), (774, 0.0), 
(775, 0.0), (776, 0.0), (777, 0.0), (778, 0.0), (779, 0.0), 
(780, 0.0), (781, 0.0), (782, 0.0), (783, 0.0), (784, 0.0), 
(785, 0.0), (786, 0.0), (787, 0.0), (788, 0.0), (789, 0.0), 
(790, 0.0), (791, 0.0), (792, 0.0), (793, 0.0), (794, 0.0), 
(795, 0.0), (796, 0.0), (797, 0.0), (798, 0.0), (799, 0.0), 
(800, 0.0), (801, 0.0), (802, 0.0), (803, 0.0), (804, 0.0), 
(805, 0.0), (806, 0.0), (807, 0.0), (808, 0.0), (809, 0.0), 
(810, 0.0), (811, 0.0), (812, 0.0), (813, 0.0), (814, 0.0), 
(815, 0.0), (816, 0.0), (817, 0.0), (818, 0.0), (819, 0.0), 
(820, 0.0), (821, 0.0), (822, 0.0), (823, 0.0), (824, 0.0), 
(825, 0.0), (826, 0.0), (827, 0.0), (828, 0.0), (829, 0.0), 
(830, 0.0)] 

SpectWhite = [
(380.000000, 1.0618958571272863e+00), (390.967743, 1.0615019980348779e+00), (401.935486, 1.0614335379927147e+00),
(412.903229, 1.0622711654692485e+00), (423.870972, 1.0622036218416742e+00), (434.838715, 1.0625059965187085e+00),
(445.806458, 1.0623938486985884e+00), (456.774200, 1.0624706448043137e+00), (467.741943, 1.0625048144827762e+00),
(478.709686, 1.0624366131308856e+00), (489.677429, 1.0620694238892607e+00), (500.645172, 1.0613167586932164e+00),
(511.612915, 1.0610334029377020e+00), (522.580627, 1.0613868564828413e+00), (533.548340, 1.0614215366116762e+00),
(544.516052, 1.0620336151299086e+00), (555.483765, 1.0625497454805051e+00), (566.451477, 1.0624317487992085e+00),
(577.419189, 1.0625249140554480e+00), (588.386902, 1.0624277664486914e+00), (599.354614, 1.0624749854090769e+00),
(610.322327, 1.0625538581025402e+00), (621.290039, 1.0625326910104864e+00), (632.257751, 1.0623922312225325e+00),
(643.225464, 1.0623650980354129e+00), (654.193176, 1.0625256476715284e+00), (665.160889, 1.0612277619533155e+00),
(676.128601, 1.0594262608698046e+00), (687.096313, 1.0599810758292072e+00), (698.064026, 1.0602547314449409e+00),
(709.031738, 1.0601263046243634e+00), (720.000000, 1.0606565756823634e+00)]


SpectCyan = [
(380.000000, 1.0414628021426751e+00), (390.967743, 1.0328661533771188e+00), (401.935486, 1.0126146228964314e+00),
(412.903229, 1.0350460524836209e+00), (423.870972, 1.0078661447098567e+00), (434.838715, 1.0422280385081280e+00),
(445.806458, 1.0442596738499825e+00), (456.774200, 1.0535238290294409e+00), (467.741943, 1.0180776226938120e+00),
(478.709686, 1.0442729908727713e+00), (489.677429, 1.0529362541920750e+00), (500.645172, 1.0537034271160244e+00),
(511.612915, 1.0533901869215969e+00), (522.580627, 1.0537782700979574e+00), (533.548340, 1.0527093770467102e+00),
(544.516052, 1.0530449040446797e+00), (555.483765, 1.0550554640191208e+00), (566.451477, 1.0553673610724821e+00),
(577.419189, 1.0454306634683976e+00), (588.386902, 6.2348950639230805e-01), (599.354614, 1.8038071613188977e-01),
(610.322327, -7.6303759201984539e-03), (621.290039, -1.5217847035781367e-04), (632.257751, -7.5102257347258311e-03),
(643.225464, -2.1708639328491472e-03), (654.193176, 6.5919466602369636e-04), (665.160889, 1.2278815318539780e-02),
(676.128601, -4.4669775637208031e-03), (687.096313, 1.7119799082865147e-02), (698.064026, 4.9211089759759801e-03),
(709.031738, 5.8762925143334985e-03), (720.000000, 2.5259399415550079e-02)]

SpectMagenta = [
(380.000000, 9.9422138151236850e-01), (390.967743, 9.8986937122975682e-01), (401.935486, 9.8293658286116958e-01),
(412.903229, 9.9627868399859310e-01), (423.870972, 1.0198955019000133e+00), (434.838715, 1.0166395501210359e+00),
(445.806458, 1.0220913178757398e+00), (456.774200, 9.9651666040682441e-01), (467.741943, 1.0097766178917882e+00),
(478.709686, 1.0215422470827016e+00), (489.677429, 6.4031953387790963e-01), (500.645172, 2.5012379477078184e-03),
(511.612915, 6.5339939555769944e-03), (522.580627, 2.8334080462675826e-03), (533.548340, -5.1209675389074505e-11),
(544.516052, -9.0592291646646381e-03), (555.483765, 3.3936718323331200e-03), (566.451477, -3.0638741121828406e-03),
(577.419189, 2.2203936168286292e-01), (588.386902, 6.3141140024811970e-01), (599.354614, 9.7480985576500956e-01),
(610.322327, 9.7209562333590571e-01), (621.290039, 1.0173770302868150e+00), (632.257751, 9.9875194322734129e-01),
(643.225464, 9.4701725739602238e-01), (654.193176, 8.5258623154354796e-01), (665.160889, 9.4897798581660842e-01),
(676.128601, 9.4751876096521492e-01), (687.096313, 9.9598944191059791e-01), (698.064026, 8.6301351503809076e-01),
(709.031738, 8.9150987853523145e-01), (720.000000, 8.4866492652845082e-01)]

SpectYellow = [
(380.000000, 5.5740622924920873e-03), (390.967743, -4.7982831631446787e-03), (401.935486, -5.2536564298613798e-03),
(412.903229, -6.4571480044499710e-03), (423.870972, -5.9693514658007013e-03), (434.838715, -2.1836716037686721e-03),
(445.806458, 1.6781120601055327e-02), (456.774200, 9.6096355429062641e-02), (467.741943, 2.1217357081986446e-01),
(478.709686, 3.6169133290685068e-01), (489.677429, 5.3961011543232529e-01), (500.645172, 7.4408810492171507e-01),
(511.612915, 9.2209571148394054e-01), (522.580627, 1.0460304298411225e+00), (533.548340, 1.0513824989063714e+00),
(544.516052, 1.0511991822135085e+00), (555.483765, 1.0510530911991052e+00), (566.451477, 1.0517397230360510e+00),
(577.419189, 1.0516043086790485e+00), (588.386902, 1.0511944032061460e+00), (599.354614, 1.0511590325868068e+00),
(610.322327, 1.0516612465483031e+00), (621.290039, 1.0514038526836869e+00), (632.257751, 1.0515941029228475e+00),
(643.225464, 1.0511460436960840e+00), (654.193176, 1.0515123758830476e+00), (665.160889, 1.0508871369510702e+00),
(676.128601, 1.0508923708102380e+00), (687.096313, 1.0477492815668303e+00), (698.064026, 1.0493272144017338e+00),
(709.031738, 1.0435963333422726e+00), (720.000000, 1.0392280772051465e+00)]

SpectRed = [
(380.000000, 1.6575604867086180e-01), (390.967743, 1.1846442802747797e-01), (401.935486, 1.2408293329637447e-01),
(412.903229, 1.1371272058349924e-01), (423.870972, 7.8992434518899132e-02), (434.838715, 3.2205603593106549e-02),
(445.806458, -1.0798365407877875e-02), (456.774200, 1.8051975516730392e-02), (467.741943, 5.3407196598730527e-03),
(478.709686, 1.3654918729501336e-02), (489.677429, -5.9564213545642841e-03), (500.645172, -1.8444365067353252e-03),
(511.612915, -1.0571884361529504e-02), (522.580627, -2.9375521078000011e-03), (533.548340, -1.0790476271835936e-02),
(544.516052, -8.0224306697503633e-03), (555.483765, -2.2669167702495940e-03), (566.451477, 7.0200240494706634e-03),
(577.419189, -8.1528469000299308e-03), (588.386902, 6.0772866969252792e-01), (599.354614, 9.8831560865432400e-01),
(610.322327, 9.9391691044078823e-01), (621.290039, 1.0039338994753197e+00), (632.257751, 9.9234499861167125e-01),
(643.225464, 9.9926530858855522e-01), (654.193176, 1.0084621557617270e+00), (665.160889, 9.8358296827441216e-01),
(676.128601, 1.0085023660099048e+00), (687.096313, 9.7451138326568698e-01), (698.064026, 9.8543269570059944e-01),
(709.031738, 9.3495763980962043e-01), (720.000000, 9.8713907792319400e-01 )]

SpectGreen = [
(380.000000, 2.6494153587602255e-03), (390.967743, -5.0175013429732242e-03), (401.935486, -1.2547236272489583e-02),
(412.903229, -9.4554964308388671e-03), (423.870972, -1.2526086181600525e-02), (434.838715, -7.9170697760437767e-03),
(445.806458, -7.9955735204175690e-03), (456.774200, -9.3559433444469070e-03), (467.741943, 6.5468611982999303e-02),
(478.709686, 3.9572875517634137e-01), (489.677429, 7.5244022299886659e-01), (500.645172, 9.6376478690218559e-01),
(511.612915, 9.9854433855162328e-01), (522.580627, 9.9992977025287921e-01), (533.548340, 9.9939086751140449e-01),
(544.516052, 9.9994372267071396e-01), (555.483765, 9.9939121813418674e-01), (566.451477, 9.9911237310424483e-01),
(577.419189, 9.6019584878271580e-01), (588.386902, 6.3186279338432438e-01), (599.354614, 2.5797401028763473e-01),
(610.322327, 9.4014888527335638e-03), (621.290039, -3.0798345608649747e-03), (632.257751, -4.5230367033685034e-03),
(643.225464, -6.8933410388274038e-03), (654.193176, -9.0352195539015398e-03), (665.160889, -8.5913667165340209e-03),
(676.128601, -8.3690869120289398e-03), (687.096313, -7.8685832338754313e-03), (698.064026, -8.3657578711085132e-06),
(709.031738, 5.4301225442817177e-03), (720.000000, -2.7745589759259194e-03)]

SpectBlue = [
(380.000000, 9.9209771469720676e-01), (390.967743, 9.8876426059369127e-01), (401.935486, 9.9539040744505636e-01),
(412.903229, 9.9529317353008218e-01), (423.870972, 9.9181447411633950e-01), (434.838715, 1.0002584039673432e+00),
(445.806458, 9.9968478437342512e-01), (456.774200, 9.9988120766657174e-01), (467.741943, 9.8504012146370434e-01),
(478.709686, 7.9029849053031276e-01), (489.677429, 5.6082198617463974e-01), (500.645172, 3.3133458513996528e-01),
(511.612915, 1.3692410840839175e-01), (522.580627, 1.8914906559664151e-02), (533.548340, -5.1129770932550889e-06),
(544.516052, -4.2395493167891873e-04), (555.483765, -4.1934593101534273e-04), (566.451477, 1.7473028136486615e-03),
(577.419189, 3.7999160177631316e-03), (588.386902, -5.5101474906588642e-04), (599.354614, -4.3716662898480967e-05),
(610.322327, 7.5874501748732798e-03), (621.290039, 2.5795650780554021e-02), (632.257751, 3.8168376532500548e-02),
(643.225464, 4.9489586408030833e-02), (654.193176, 4.9595992290102905e-02), (665.160889, 4.9814819505812249e-02),
(676.128601, 3.9840911064978023e-02), (687.096313, 3.0501024937233868e-02), (698.064026, 2.1243054765241080e-02),
(709.031738, 6.9596532104356399e-03), (720.000000, 4.1733649330980525e-03)]

IllumSpectWhite = [
(380.000000, 1.1565232050369776e+00), (390.967743, 1.1567225000119139e+00), (401.935486, 1.1566203150243823e+00),
(412.903229, 1.1555782088080084e+00), (423.870972, 1.1562175509215700e+00), (434.838715, 1.1567674012207332e+00),
(445.806458, 1.1568023194808630e+00), (456.774200, 1.1567677445485520e+00), (467.741943, 1.1563563182952830e+00),
(478.709686, 1.1567054702510189e+00), (489.677429, 1.1565134139372772e+00), (500.645172, 1.1564336176499312e+00),
(511.612915, 1.1568023181530034e+00), (522.580627, 1.1473147688514642e+00), (533.548340, 1.1339317140561065e+00),
(544.516052, 1.1293876490671435e+00), (555.483765, 1.1290515328639648e+00), (566.451477, 1.0504864823782283e+00),
(577.419189, 1.0459696042230884e+00), (588.386902, 9.9366687168595691e-01), (599.354614, 9.5601669265393940e-01),
(610.322327, 9.2467482033511805e-01), (621.290039, 9.1499944702051761e-01), (632.257751, 8.9939467658453465e-01),
(643.225464, 8.9542520751331112e-01), (654.193176, 8.8870566693814745e-01), (665.160889, 8.8222843814228114e-01),
(676.128601, 8.7998311373826676e-01), (687.096313, 8.7635244612244578e-01), (698.064026, 8.8000368331709111e-01),
(709.031738, 8.8065665428441120e-01), (720.000000, 8.8304706460276905e-01)]

IllumSpectCyan = [
(380.000000, 1.1334479663682135e+00), (390.967743, 1.1266762330194116e+00), (401.935486, 1.1346827504710164e+00),
(412.903229, 1.1357395805744794e+00), (423.870972, 1.1356371830149636e+00), (434.838715, 1.1361152989346193e+00),
(445.806458, 1.1362179057706772e+00), (456.774200, 1.1364819652587022e+00), (467.741943, 1.1355107110714324e+00),
(478.709686, 1.1364060941199556e+00), (489.677429, 1.1360363621722465e+00), (500.645172, 1.1360122641141395e+00),
(511.612915, 1.1354266882467030e+00), (522.580627, 1.1363099407179136e+00), (533.548340, 1.1355450412632506e+00),
(544.516052, 1.1353732327376378e+00), (555.483765, 1.1349496420726002e+00), (566.451477, 1.1111113947168556e+00),
(577.419189, 9.0598740429727143e-01), (588.386902, 6.1160780787465330e-01), (599.354614, 2.9539752170999634e-01),
(610.322327, 9.5954200671150097e-02), (621.290039, -1.1650792030826267e-02), (632.257751, -1.2144633073395025e-02),
(643.225464, -1.1148167569748318e-02), (654.193176, -1.1997606668458151e-02), (665.160889, -5.0506855475394852e-03),
(676.128601, -7.9982745819542154e-03), (687.096313, -9.4722817708236418e-03), (698.064026, -5.5329541006658815e-03),
(709.031738, -4.5428914028274488e-03), (720.000000, -1.2541015360921132e-02)]

IllumSpectMagenta = [
(380.000000, 1.0371892935878366e+00), (390.967743, 1.0587542891035364e+00), (401.935486, 1.0767271213688903e+00),
(412.903229, 1.0762706844110288e+00), (423.870972, 1.0795289105258212e+00), (434.838715, 1.0743644742950074e+00),
(445.806458, 1.0727028691194342e+00), (456.774200, 1.0732447452056488e+00), (467.741943, 1.0823760816041414e+00),
(478.709686, 1.0840545681409282e+00), (489.677429, 9.5607567526306658e-01), (500.645172, 5.5197896855064665e-01),
(511.612915, 8.4191094887247575e-02), (522.580627, 8.7940070557041006e-05), (533.548340, -2.3086408335071251e-03),
(544.516052, -1.1248136628651192e-03), (555.483765, -7.7297612754989586e-11), (566.451477, -2.7270769006770834e-04),
(577.419189, 1.4466473094035592e-02), (588.386902, 2.5883116027169478e-01), (599.354614, 5.2907999827566732e-01),
(610.322327, 9.0966624097105164e-01), (621.290039, 1.0690571327307956e+00), (632.257751, 1.0887326064796272e+00),
(643.225464, 1.0637622289511852e+00), (654.193176, 1.0201812918094260e+00), (665.160889, 1.0262196688979945e+00),
(676.128601, 1.0783085560613190e+00), (687.096313, 9.8333849623218872e-01), (698.064026, 1.0707246342802621e+00),
(709.031738, 1.0634247770423768e+00), (720.000000, 1.0150875475729566e+00)]

IllumSpectYellow = [
(380.000000, 2.7756958965811972e-03), (390.967743, 3.9673820990646612e-03), (401.935486, -1.4606936788606750e-04),
(412.903229, 3.6198394557748065e-04), (423.870972, -2.5819258699309733e-04), (434.838715, -5.0133191628082274e-05),
(445.806458, -2.4437242866157116e-04), (456.774200, -7.8061419948038946e-05), (467.741943, 4.9690301207540921e-02),
(478.709686, 4.8515973574763166e-01), (489.677429, 1.0295725854360589e+00), (500.645172, 1.0333210878457741e+00),
(511.612915, 1.0368102644026933e+00), (522.580627, 1.0364884018886333e+00), (533.548340, 1.0365427939411784e+00),
(544.516052, 1.0368595402854539e+00), (555.483765, 1.0365645405660555e+00), (566.451477, 1.0363938240707142e+00),
(577.419189, 1.0367205578770746e+00), (588.386902, 1.0365239329446050e+00), (599.354614, 1.0361531226427443e+00),
(610.322327, 1.0348785007827348e+00), (621.290039, 1.0042729660717318e+00), (632.257751, 8.4218486432354278e-01),
(643.225464, 7.3759394894801567e-01), (654.193176, 6.5853154500294642e-01), (665.160889, 6.0531682444066282e-01),
(676.128601, 5.9549794132420741e-01), (687.096313, 5.9419261278443136e-01), (698.064026, 5.6517682326634266e-01),
(709.031738, 5.6061186014968556e-01), (720.000000, 5.8228610381018719e-01 )]

IllumSpectRed = [
(380.000000, 5.4711187157291841e-02), (390.967743, 5.5609066498303397e-02), (401.935486, 6.0755873790918236e-02),
(412.903229, 5.6232948615962369e-02), (423.870972, 4.6169940535708678e-02), (434.838715, 3.8012808167818095e-02),
(445.806458, 2.4424225756670338e-02), (456.774200, 3.8983580581592181e-03), (467.741943, -5.6082252172734437e-04),
(478.709686, 9.6493871255194652e-04), (489.677429, 3.7341198051510371e-04), (500.645172, -4.3367389093135200e-04),
(511.612915, -9.3533962256892034e-05), (522.580627, -1.2354967412842033e-04), (533.548340, -1.4524548081687461e-04),
(544.516052, -2.0047691915543731e-04), (555.483765, -4.9938587694693670e-04), (566.451477, 2.7255083540032476e-02),
(577.419189, 1.6067405906297061e-01), (588.386902, 3.5069788873150953e-01), (599.354614, 5.7357465538418961e-01),
(610.322327, 7.6392091890718949e-01), (621.290039, 8.9144466740381523e-01), (632.257751, 9.6394609909574891e-01),
(643.225464, 9.8879464276016282e-01), (654.193176, 9.9897449966227203e-01), (665.160889, 9.8605140403564162e-01),
(676.128601, 9.9532502805345202e-01), (687.096313, 9.7433478377305371e-01), (698.064026, 9.9134364616871407e-01),
(709.031738, 9.8866287772174755e-01), (720.000000, 9.9713856089735531e-01)]

IllumSpectGreen = [
(380.000000, 2.5168388755514630e-02), (390.967743, 3.9427438169423720e-02), (401.935486, 6.2059571596425793e-03),
(412.903229, 7.1120859807429554e-03), (423.870972, 2.1760044649139429e-04), (434.838715, 7.3271839984290210e-12),
(445.806458, -2.1623066217181700e-02), (456.774200, 1.5670209409407512e-02), (467.741943, 2.8019603188636222e-03),
(478.709686, 3.2494773799897647e-01), (489.677429, 1.0164917292316602e+00), (500.645172, 1.0329476657890369e+00),
(511.612915, 1.0321586962991549e+00), (522.580627, 1.0358667411948619e+00), (533.548340, 1.0151235476834941e+00),
(544.516052, 1.0338076690093119e+00), (555.483765, 1.0371372378155013e+00), (566.451477, 1.0361377027692558e+00),
(577.419189, 1.0229822432557210e+00), (588.386902, 9.6910327335652324e-01), (599.354614, -5.1785923899878572e-03),
(610.322327, 1.1131261971061429e-03), (621.290039, 6.6675503033011771e-03), (632.257751, 7.4024315686001957e-04),
(643.225464, 2.1591567633473925e-02), (654.193176, 5.1481620056217231e-03), (665.160889, 1.4561928645728216e-03),
(676.128601, 1.6414511045291513e-04), (687.096313, -6.4630764968453287e-03), (698.064026, 1.0250854718507939e-02),
(709.031738, 4.2387394733956134e-02), (720.000000, 2.1252716926861620e-02)]

IllumSpectBlue = [
(380.000000, 1.0570490759328752e+00), (390.967743, 1.0538466912851301e+00), (401.935486, 1.0550494258140670e+00),
(412.903229, 1.0530407754701832e+00), (423.870972, 1.0579930596460185e+00), (434.838715, 1.0578439494812371e+00),
(445.806458, 1.0583132387180239e+00), (456.774200, 1.0579712943137616e+00), (467.741943, 1.0561884233578465e+00),
(478.709686, 1.0571399285426490e+00), (489.677429, 1.0425795187752152e+00), (500.645172, 3.2603084374056102e-01),
(511.612915, -1.9255628442412243e-03), (522.580627, -1.2959221137046478e-03), (533.548340, -1.4357356276938696e-03),
(544.516052, -1.2963697250337886e-03), (555.483765, -1.9227081162373899e-03), (566.451477, 1.2621152526221778e-03),
(577.419189, -1.6095249003578276e-03), (588.386902, -1.3029983817879568e-03), (599.354614, -1.7666600873954916e-03),
(610.322327, -1.2325281140280050e-03), (621.290039, 1.0316809673254932e-02), (632.257751, 3.1284512648354357e-02),
(643.225464, 8.8773879881746481e-02), (654.193176, 1.3873621740236541e-01), (665.160889, 1.5535067531939065e-01),
(676.128601, 1.4878477178237029e-01), (687.096313, 1.6624255403475907e-01), (698.064026, 1.6997613960634927e-01),
(709.031738, 1.5769743995852967e-01), (720.000000, 1.9069090525482305e-01)]

class SpectrumConverter:
    def __init__(self, renderer):
        self.renderer = renderer

        self._cie_x = self._create_sampled_spectrum(Cie_x)
        self._cie_y = self._create_sampled_spectrum(Cie_y)
        self._cie_z = self._create_sampled_spectrum(Cie_z)
        self.yint= sum(self._cie_y.samples)

        self._spect_white = self._create_sampled_spectrum(SpectWhite)
        self._spect_cyan = self._create_sampled_spectrum(SpectCyan)
        self._spect_magenta = self._create_sampled_spectrum(SpectMagenta)
        self._spect_yellow = self._create_sampled_spectrum(SpectYellow)
        self._spect_red = self._create_sampled_spectrum(SpectRed)
        self._spect_green = self._create_sampled_spectrum(SpectGreen)
        self._spect_blue = self._create_sampled_spectrum(SpectBlue)

        self._illum_spect_white = self._create_sampled_spectrum(IllumSpectWhite)
        self._illum_spect_cyan = self._create_sampled_spectrum(IllumSpectCyan)
        self._illum_spect_magenta = self._create_sampled_spectrum(IllumSpectMagenta)
        self._illum_spect_yellow = self._create_sampled_spectrum(IllumSpectYellow)
        self._illum_spect_red = self._create_sampled_spectrum(IllumSpectRed)
        self._illum_spect_green = self._create_sampled_spectrum(IllumSpectGreen)
        self._illum_spect_blue = self._create_sampled_spectrum(IllumSpectBlue)

    def xyz_to_rgb(self, x, y, z):
        r = 3.240479 * x - 1.537150 * y - 0.498535 * z
        g = -0.969256 * x + 1.875991 * y + 0.041556 * z
        b = 0.055648 * x - 0.204043 * y + 1.057311 * z
        return (r, g, b)

    def rgb_to_xyz(self, r, g, b):
        x = 0.412453 * r + 0.357580 * g + 0.180423 * b
        y = 0.212671 * r + 0.715160 * g + 0.072169 * b
        z = 0.019334 * r + 0.119193 * g + 0.950227 * b 
        return (x, y, z)

    def rgb_to_sampled(self, values, illum=False):
        if len(values) != 3: raise ValueError("We need just 3 rgb values!!!") 
        r, g, b = values
        if illum:
            #conversion of illuminat 
            if r <= g and r <= b:
                # Compute illuminant with red as minimum
                rez = r * self._illum_spect_white
                if g <= b:
                    rez += (g - r) * self._illum_spect_cyan
                    rez += (b - g) * self._illum_spect_blue
                else:
                    rez += (b - r) * self._illum_spect_cyan
                    rez += (g - b) * self._illum_spect_green
            elif g <= r and g <= b:
                # Compute illuminant with green as minimum
                rez = g * self._illum_spect_white
                if r <= b:
                    rez += (r - g) * self._illum_spect_magenta
                    rez += (b - r) * self._illum_spect_blue
                else:
                    rez += (b - g) * self._illum_spect_magenta
                    rez += (r - b) * self._illum_spect_red
            else:
                # Compute illuminant with blue as minimum
                rez = b * self._illum_spect_white
                if r <= g:
                    rez += (r - b) * self._illum_spect_yellow
                    rez += (g - r) * self._illum_spect_green
                else:
                    rez += (g - b) * self._illum_spect_yellow
                    rez += (r - g) * self._illum_spect_red
            rez = rez * 0.86445
        else:
            #conversion of reflectance 
            if r <= g and r <= b:
                # Compute illuminant with red as minimum
                rez = r * self._spect_white
                if g <= b:
                    rez += (g - r) * self._spect_cyan
                    rez += (b - g) * self._spect_blue
                else:
                    rez += (b - r) * self._spect_cyan
                    rez += (g - b) * self._spect_green
            elif g <= r and g <= b:
                # Compute illuminant with green as minimum
                rez = g * self._spect_white
                if r <= b:
                    rez += (r - g) * self._spect_magenta
                    rez += (b - r) * self._spect_blue
                else:
                    rez += (b - g) * self._spect_magenta
                    rez += (r - b) * self._spect_red
            else:
                # Compute illuminant with blue as minimum
                rez = b * self._spect_white
                if r <= g:
                    rez += (r - b) * self._spect_yellow
                    rez += (g - r) * self._spect_green
                else:
                    rez += (g - b) * self._spect_yellow
                    rez += (r - g) * self._spect_red
            rez = rez * 0.94
        rez.clamp()
        return rez

    def _to_xyz(self, spectrum):
        x = self._cie_x.mix_spectrum(spectrum)
        y = self._cie_y.mix_spectrum(spectrum)
        z = self._cie_z.mix_spectrum(spectrum)
        x_sum = sum(x.samples)
        y_sum = sum(y.samples)
        z_sum = sum(z.samples)

        X = x_sum / self.yint  
        Y = y_sum / self.yint  
        Z = z_sum / self.yint  
        return (X, Y, Z)

    def Y(self, spectrum):
        if spectrum.sampled:
            y = self._cie_y.mix_spectrum(spectrum)
            y_sum = sum(y.samples)
            return y_sum / self.yint  
        else:
            return spectrum.r*0.212671 + spectrum.g*0.715160 + spectrum.b*0.072169

    #eax is pointer spectrum structure
    def Y_asm(self, label, runtimes):
        structs = self.renderer.structures.get_struct('spectrum')
        sampled = self.renderer.spectral_rendering
        if sampled:
            ASM = """
                #DATA
            """
            ASM += structs +  """
                spectrum __y
                spectrum temp
                float one_over_yint
                #CODE
            """
            ASM += " global " + label + ":\n" + """
                mov ebx, __y
                mov ecx, temp
                macro spectrum ecx = eax * ebx
                macro spectrum sum ecx
                macro eq32 xmm0 = xmm0 * one_over_yint 
                ret
            """
            self.ds = []
            mc = self.renderer.assembler.assemble(ASM, True)
            #mc.print_machine_code()
            name = "lumminance" + str(hash(self))
            for r in runtimes:
                if not r.global_exists(label):
                    ds = r.load(name, mc)
                    self.ds.append(ds)
            for ds in self.ds:
                ds["one_over_yint"] = 1.0 / self.yint
                ds["__y.values"] = self._cie_y.to_ds()
        else:
            #eax is pointer spectrum structure
            ASM = """
                #DATA
                float lumm[4] = 0.212671, 0.715160, 0.072169, 0.0
            """
            ASM += structs +  """
                #CODE
                """
            if proc.AVX:
                ASM += " global " + label + ":\n" + """
                    vmovaps xmm0, oword[eax + spectrum.values]
                    macro dot xmm0 = xmm0 * lumm {xmm6, xmm7}
                    ret
                    """
            else:
                ASM += " global " + label + ":\n" + """
                    movaps xmm0, oword[eax + spectrum.values]
                    macro dot xmm0 = xmm0 * lumm {xmm6, xmm7}
                    ret
                    """
            mc = self.renderer.assembler.assemble(ASM, True)
            #mc.print_machine_code()
            name = "Y_lumm" + str(hash(self))
            for r in runtimes:
                if not r.global_exists(label):
                    r.load(name, mc)

    def to_rgb(self, spectrum):
        if spectrum.sampled:
            x, y, z = self._to_xyz(spectrum)
            rgb = self.xyz_to_rgb(x, y, z)
            return rgb
        else:
            return (spectrum.r, spectrum.g, spectrum.b)

    def to_rgb_asm(self, label, runtimes):
        structs = self.renderer.structures.get_struct('spectrum')
        sampled = self.renderer.spectral_rendering
        if sampled:
            ASM = """
                #DATA
            """
            ASM += structs +  """
                spectrum __x, __y, __z
                spectrum temp
                float one_over_yint
                float X, Y, Z
                float XYZ[4]
                float coff1[4] = 3.240479, -0.969256, 0.055648, 0.0
                float coff2[4] = -1.537150, 1.875991, -0.204043, 0.0
                float coff3[4] = -0.498535, 0.041556, 1.057311, 0.0

                #CODE
            """
            ASM += " global " + label + ":\n" + """
                mov ebx, __x
                mov ecx, temp
                macro spectrum ecx = eax * ebx
                macro spectrum sum ecx
                macro eq32 XYZ = xmm0 * one_over_yint {xmm1}
                mov ebx, __y
                macro spectrum ecx = eax * ebx
                macro spectrum sum ecx
                macro eq32 xmm0 = xmm0 * one_over_yint
            """
            if proc.AVX:
                ASM += "vmovss dword [XYZ + 4], xmm0 \n"
            else:
                ASM += "movss dword [XYZ + 4], xmm0 \n"
            ASM += """
                mov ebx, __z
                macro spectrum ecx = eax * ebx
                macro spectrum sum ecx
                macro eq32 xmm0 = xmm0 * one_over_yint {xmm1}
                """
            if proc.AVX:
                ASM += "vmovss dword [XYZ + 8], xmm0 \n"
            else:
                ASM += "movss dword [XYZ + 8], xmm0 \n"
            ASM += """
                macro eq128 xmm1 = XYZ 
                macro broadcast xmm0 = xmm1[0]
                macro eq128 xmm0 = xmm0 * coff1
                macro broadcast xmm2 = xmm1[1]
                macro eq128 xmm2 = xmm2 * coff2
                macro eq128 xmm0 = xmm0 + xmm2
                macro broadcast xmm3 = xmm1[2]
                macro eq128 xmm3 = xmm3 * coff3
                macro eq128 xmm0 = xmm0 + xmm3
                ret
            """
            self.ds = []
            mc = self.renderer.assembler.assemble(ASM, True)
            #mc.print_machine_code()
            name = "spectrum_to_rgb" + str(hash(self))
            for r in runtimes:
                if not r.global_exists(label):
                    ds = r.load(name, mc)
                    self.ds.append(ds)
            for ds in self.ds:
                ds["one_over_yint"] = 1.0 / self.yint
                ds["__x.values"] = self._cie_x.to_ds()
                ds["__y.values"] = self._cie_y.to_ds()
                ds["__z.values"] = self._cie_z.to_ds()

        else:
            #eax is pointer spectrum structure
            ASM = """
                #DATA
            """
            ASM += structs +  """
                #CODE
                """
            if proc.AVX:
                ASM += " global " + label + ":\n" + """
                    vmovaps xmm0, oword[eax + spectrum.values]
                    ret
                    """
            else:
                ASM += " global " + label + ":\n" + """
                    movaps xmm0, oword[eax + spectrum.values]
                    ret
                    """
            mc = self.renderer.assembler.assemble(ASM, True)
            #mc.print_machine_code()
            name = "spectrum_to_rgb" + str(hash(self))
            for r in runtimes:
                if not r.global_exists(label):
                    r.load(name, mc)


    def lambdas(self): #return array of lambda samples
        nspec = self.renderer.nspectrum_samples
        start, end = self.renderer.spectrum_region
        s = []
        for i in range(nspec):
            lambda0 = self.lerp(float(i)/float(nspec), start, end)
            lambda1 = self.lerp(float(i+1)/float(nspec), start, end)
            s.append(lambda0)
        return s

    def intervals(self):
        nspec = self.renderer.nspectrum_samples
        start, end = self.renderer.spectrum_region
        s = []
        for i in range(nspec):
            lambda0 = self.lerp(float(i)/float(nspec), start, end)
            lambda1 = self.lerp(float(i+1)/float(nspec), start, end)
            s.append((lambda0, lambda1))
        return s

    #TODO -- what if vals have 3 samples and it is sampled spectrum???? solve this
    def create_spectrum(self, vals, illum=False):
        if self.renderer.spectral_rendering:
            if len(vals) == 3:
                return self.rgb_to_sampled(vals, illum)
            else:
                return self._create_sampled_spectrum(vals)
        else:
            if len(vals) == 3:
                return Spectrum(False, vals)
            else:
                s = self._create_sampled_spectrum(vals)
                rgb = self.to_rgb(s)
                return Spectrum(False, rgb)

    def convert_spectrum(self, spectrum, illum=False):
        #TODO -- resampled spectrum 
        if self.renderer.spectral_rendering:
            if spectrum.sampled:
                return spectrum
            else:
                return self.create_spectrum((spectrum.r, spectrum.g, spectrum.b), illum)
        else:
            if spectrum.sampled:
                rgb = self.to_rgb(spectrum)
                return Spectrum(False, rgb)
            else:
                return spectrum

    def zero_spectrum(self):
        if self.renderer.spectral_rendering:
            nspec = self.renderer.nspectrum_samples
            vals = [0.0 for i in range(nspec)] 
            return Spectrum(True, vals)
        else:
            return Spectrum(False, (0.0, 0.0, 0.0))

    def _create_sampled_spectrum(self, vals):
        samples = self._create_samples(vals)
        return Spectrum(True, samples)

    #val - values at certain wavelength - tuple (lambda, value)
    #start - start lambda
    #end - end lambda
    def _create_samples(self, vals):
        nspec = self.renderer.nspectrum_samples
        start, end = self.renderer.spectrum_region
        s = []
        for i in range(nspec):
            lambda0 = self.lerp(float(i)/float(nspec), start, end)
            lambda1 = self.lerp(float(i+1)/float(nspec), start, end)
            s.append(self._average_spectrum(vals, lambda0, lambda1))
        return s

    def _average_spectrum(self, vals, lambda1, lambda2):
        # out of bounds or single value
        lam1, val1 = vals[0]
        if lambda2 <= lam1: return val1
        lam2, val2 = vals[-1]
        if lambda1 >= lam2: return val2
        if len(vals) == 1: return val1

        # add contribution of constant segments before and after samples
        s = 0.0
        if lambda1 < lam1:
            s += val1 * (lam1 - lambda1)
        if lambda2 > lam2:
            s += val2 * (lambda2 - lam2)
        
        # advance to first relevant wavelength segment
        i = 0
        while lambda1 > vals[i+1][0]:
            i += 1

        def interp(w, i):
            return self.lerp((w-vals[i][0])/(vals[i+1][0]-vals[i][0]), vals[i][1], vals[i+1][1])

        def average(seg_start, seg_end, i):
            return 0.5 * (interp(seg_start, i) + interp(seg_end, i))

        # loop over wavelength sample segments and add contributions
        n = len(vals)
        while i+1 < n and lambda2 >= vals[i][0]:
            seg_start = max(lambda1, vals[i][0])
            seg_end = min(lambda2, vals[i+1][0])
            s += average(seg_start, seg_end, i) * (seg_end - seg_start)
            i += 1
        return s / (lambda2 - lambda1)

    # linear intepolation
    def lerp(self, t, v1, v2):
        return (1.0 - t) * v1 + t * v2


