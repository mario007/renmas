from tdasm import Runtime
import renmas2
from renmas2.core import SpectrumConverter


renderer = renmas2.Renderer()
renderer.spectrum_rendering = True
conv = SpectrumConverter(renderer)

illuminat_B = [(320.0, 0.02), (325.0, 0.26), (330.0, 0.50), (335.0, 1.45), (340.0, 2.40), (345.0, 4.00), (350.0, 5.60), 
(355.0, 7.60), (360.0, 9.60), (365.0, 12.40), (370.0, 15.20), (375.0, 18.80), (380.0, 22.40), (385.0, 26.85), 
(390.0, 31.30) ,(395.0, 36.18), (400.0, 41.30), (405.0,	46.62), (410.0, 52.10), (415.0, 57.70), (420.0, 63.20),
(425.0, 68.37), (430.0, 73.10), (435.0, 77.31), (440.0, 80.80), (445.0, 83.44), (450.0, 85.40), (455.0,	86.88), 
(460.0,	88.30), (465.0,	90.08), (470.0, 92.00), (475.0,	93.75), (480.0,	95.20), (485.0, 96.23), (490.0, 96.50), 
(495.0, 95.71), (500.0, 94.20), (505.0, 92.37), (510.0, 90.70), (515.0, 89.65), (520.0, 89.50), (525.0, 90.43), 
(530.0, 92.20), (535.0, 94.46), (540.0, 96.90), (545.0, 99.16), (550.0, 101.00), (555.0, 102.20), (560.0, 102.80),
(565.0, 102.92), (570.0, 102.60), (575.0, 101.90), (580.0, 101.00), (585.0, 100.07), (590.0, 99.20), 
(595.0,	98.44), (600.0, 98.00), (605.0, 98.08), (610.0, 98.50), (615.0, 99.06), (620.0,	99.70), (625.0, 100.36), 
(630.0, 101.00), (635.0, 101.56), (640.0, 102.20), (645.0, 103.05), (650.0, 103.90), (655.0, 104.59), (660.0, 105.00), 
(665.0, 105.08), (670.0, 104.90), (675.0, 104.55), (680.0, 103.90), (685.0, 102.84), (690.0, 101.60), (695.0, 100.38), 
(700.0, 99.10), (705.0, 97.70), (710.0, 96.20), (715.0, 94.60), (720.0, 92.90), (725.0, 91.10), (730.0, 89.40), 
(735.0, 88.00), (740.0, 86.90), (745.0, 85.90), (750.0, 85.20), (755.0,	84.80), (760.0, 84.70), 
(765.0, 84.90), (770.0,	85.40)]


ib = conv.create_spectrum(illuminat_B)
r, g, b = conv.to_rgb(ib)

structs = renderer.structures.get_struct('spectrum')
ASM = """
    #DATA
"""
ASM += structs +  """
    spectrum sp1
    float rgb[4]
    float XYZ[4]
    #CODE
    mov eax, sp1
    call spectrum_to_rgb
    macro eq128 rgb = xmm0 {xmm0}
    
    #END
    """

run = Runtime()
conv.to_rgb_asm("spectrum_to_rgb", [run])
mc = renderer.assembler.assemble(ASM)
ds = run.load("test", mc)
print(ib.to_ds())
ds["sp1.values"] = ib.to_ds()
run.run("test")
print("ASM", ds["rgb"])

print(r, g, b)


ill = conv.rgb_to_sampled((0.88, 0.99, 0.3), True)
print(ill)
print(conv.to_rgb(ill))

